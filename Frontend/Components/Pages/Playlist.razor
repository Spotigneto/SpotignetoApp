@page "/playlist"
@rendermode InteractiveServer
@using System.Text.Json
@using System.Text
@inject HttpClient Http
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Playlist - SpotignetoApp</PageTitle>

<div class="playlist-page">
    <div class="playlist-container">
        <!-- Left Sidebar -->
        <div class="playlist-sidebar">
     <div class="playlist-cover">
          <svg class="playlist-icon" viewBox="0 0 64 64" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M32 8c-1.1 0-2 .9-2 2v28.3c-1.2-.8-2.6-1.3-4-1.3-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8V16h8c1.1 0 2-.9 2-2s-.9-2-2-2h-10z" fill="currentColor"/>
  </svg>
  </div>
      <button class="create-playlist-btn" @onclick="CreatePlaylist" disabled="@isCreating">
     <span>Create Playlist</span>
   </button>

            @if (showSuccessMessage)
     {
     <div class="@(successMessage.Contains("successfully") ? "success-message" : "error-message")">
        @successMessage
  </div>
}
     </div>

        <!-- Main Content -->
        <div class="playlist-content">
     <!-- Playlist Header -->
  <div class="playlist-header">
   <div class="playlist-label">PLAYLIST</div>
        <input type="text" 
             class="playlist-title-input" 
    @bind="playlistName" 
     @bind:event="oninput"
           maxlength="100"
  placeholder="My Playlist" />
   <div class="playlist-info">
        <span class="song-count">@selectedSongs.Count songs@(GetTotalDuration())</span>
        <div class="privacy-toggle">
<label class="toggle-container">
  <input type="checkbox" @bind="isPrivate" @bind:after="OnPrivacyChanged" />
  <span class="toggle-slider"></span>
    </label>
    <span class="privacy-icon">
     @if (isPrivate)
   {
   <svg width="14" height="14" viewBox="0 0 16 16" fill="currentColor">
     <path d="M8 1C5.8 1 4 2.8 4 5v1.5H3c-.6 0-1 .4-1 1V14c0 .6.4 1 1 1h10c.6 0 1-.4 1-1V7.5c0-.6-.4-1-1-1h-1V5c0-2.2-1.8-4-4-4zm0 1.5c1.4 0 2.5 1.1 2.5 2.5v1.5h-5V5c0-1.4 1.1-2.5 2.5-2.5z"/>
         </svg>
 }
         else
  {
   <svg width="14" height="14" viewBox="0 0 16 16" fill="currentColor">
    <circle cx="8" cy="8" r="6.5" stroke="currentColor" fill="none" stroke-width="1"/>
 </svg>
       }
  </span>
     <span class="privacy-text">@(isPrivate ? "Private" : "Public")</span>
 </div>
    </div>
  </div>

   <!-- Add Songs Section -->
         <div class="add-songs-section">
         <div class="add-songs-header">
        <h2 class="section-title">Add Songs</h2>
     
        <div class="search-container">
  <svg class="search-icon" width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
    <path d="M11.5 6.5a5 5 0 1 1-10 0 5 5 0 0 1 10 0zm-1.27 4.27a6.5 6.5 0 1 1 1.06-1.06l3.5 3.5a.75.75 0 1 1-1.06 1.06l-3.5-3.5z"/>
     </svg>
          <input 
     type="text" 
     class="search-input" 
   placeholder="Search for songs" 
           @bind="searchQuery"
             @bind:event="oninput"
      @onkeyup="OnSearchKeyUp" />
          </div>
     </div>

    <!-- Song Table -->
        <div class="song-table">
   <div class="song-table-header">
            <div class="col-check"></div>
      <div class="col-title">TITLE</div>
 <div class="col-album">ALBUM</div>
        <div class="col-duration">
        <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
               <path d="M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM8 13a5 5 0 110-10 5 5 0 010 10z"/>
          <path d="M8 3.25a.75.75 0 01.75.75v3.69l2.28 2.28a.75.75 0 11-1.06 1.06L7.47 8.53a.75.75 0 01-.22-.53V4A.75.75 0 018 3.25z"/>
       </svg>
  </div>
     </div>

         <div class="song-list">
  @foreach (var song in PageSongs)
         {
  var isSelected = selectedSongs.Contains(song);
                   <div class="song-row @(isSelected ? "selected" : "")" @onclick="() => ToggleSongSelection(song)">
     <div class="col-check">
         <label class="checkbox-container" @onclick:stopPropagation="true">
         <input type="checkbox" 
                checked="@isSelected" 
       @onchange="() => ToggleSongSelection(song)" />
  <span class="checkbox-custom @(isSelected ? "checked" : "")">
  @if (isSelected)
              {
 <svg width="10" height="10" viewBox="0 0 10 10" fill="none">
            <path d="M8.5 2.5L4 7L1.5 4.5" stroke="#000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
       </svg>
      }
         </span>
             </label>
         </div>
   <div class="col-title">
        <img src="@song.CoverUrl" alt="@song.Title" class="song-cover" />
         <div class="song-details">
     <div class="song-name @(isSelected ? "selected-text" : "")">@song.Title</div>
        <div class="song-artist">@song.Artist</div>
        </div>
</div>
   <div class="col-album">@song.Album</div>
           <div class="col-duration">@song.Duration</div>
            </div>
   }
      </div>

      <!-- Pagination Controls -->
      <div class="pagination">
          <button class="page-button" @onclick="PrevPage" disabled="@(currentPage == 1)">Prev</button>
          <span class="page-info">Page @currentPage of @TotalPages</span>
          <button class="page-button" @onclick="NextPage" disabled="@(currentPage == TotalPages)">Next</button>
      </div>
                </div>
    </div>
        </div>
</div>
</div>

@if (showSuccessMessage)
{
<div class="success-message">@successMessage</div>
}

@code {
    private bool playlistCreated = false;
    private string playlistName = "My Playlist";
    private bool isPrivate = false;
    private string searchQuery = string.Empty;
    private string successMessage = string.Empty;
    private bool showSuccessMessage = false;
    private bool isCreating = false;
    
    private List<Song> allSongs = new();
    private List<Song> filteredSongs = new();
    private HashSet<Song> selectedSongs = new();

    // Stato paginazione
    private int currentPage = 1;
    private int songsPerPage = 12;
    private int TotalPages => Math.Max(1, (int)Math.Ceiling((double)filteredSongs.Count / songsPerPage));
    private IEnumerable<Song> PageSongs => filteredSongs.Skip((currentPage - 1) * songsPerPage).Take(songsPerPage);

    // Interop JS per viewport/resize
    private DotNetObjectReference<Playlist>? dotNetRef;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var data = await Http.GetFromJsonAsync<RandomViewResponse>("api/Home/Random_View?songs=200&albums=0&artists=0&playlists=0");
            var gradients = new[]
            {
                "linear-gradient(135deg, #fa709a 0%, #fee140 100%)",
                "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
                "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
                "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
                "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
            };

            allSongs = (data?.Songs ?? new List<ItemModel>())
                .Select((s, i) => new Song
                {
                    Id = s.Id,
                    Title = s.Nome,
                    Artist = s.Artista,
                    Album = string.Empty,
                    Duration = "—",
                    DurationSeconds = 0,
                    CoverUrl = GenerateCoverSvg(gradients[i % gradients.Length], s.Nome, s.Artista)
                })
                .ToList();

            filteredSongs = allSongs;
        }
        catch
        {
            filteredSongs = new List<Song>();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var width = await JS.InvokeAsync<int>("spotignete.getViewportWidth");
            RecalculateSongsPerPage(width);
            dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("spotignete.registerResize", dotNetRef);
        }
    }

    private async Task CreatePlaylist()
    {
        // Validazioni base
        if (string.IsNullOrWhiteSpace(playlistName))
        {
            successMessage = "Il nome della playlist è obbligatorio";
            showSuccessMessage = true;
            await Task.Delay(3000);
            showSuccessMessage = false;
            StateHasChanged();
            return;
        }

        if (selectedSongs.Count == 0)
        {
            successMessage = "Seleziona almeno una canzone";
            showSuccessMessage = true;
            await Task.Delay(3000);
            showSuccessMessage = false;
            StateHasChanged();
            return;
        }

        // Imposta stato di caricamento
        isCreating = true;
        StateHasChanged();

        try
        {
            // Prepara i dati per l'API (camelCase compatibile)
            var playlistData = new
            {
                Nome = playlistName.Trim(),
                Privata = isPrivate
            };

            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            };
            var jsonContent = JsonSerializer.Serialize(playlistData, jsonOptions);
            var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            // Esegue la chiamata POST funzionante
            var response = await Http.PostAsync("api/Records/playlist", httpContent);

            if (response.IsSuccessStatusCode)
            {
                // Deserializza la playlist creata per ottenere l'ID
                var body = await response.Content.ReadAsStringAsync();
                var createdPlaylist = JsonSerializer.Deserialize<PlaylistModel>(body, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                var playlistId = createdPlaylist?.Id ?? string.Empty;

                // Se abbiamo un ID playlist valido, aggancia automaticamente i brani selezionati
                if (!string.IsNullOrEmpty(playlistId))
                {
                    foreach (var song in selectedSongs)
                    {
                        var trackPayload = new { AcPlaylistId = playlistId, AcCanzoneId = song.Id };
                        var trackJson = JsonSerializer.Serialize(trackPayload);
                        var trackContent = new StringContent(trackJson, Encoding.UTF8, "application/json");
                        var trackResp = await Http.PostAsync("api/AsCanzonePlaylist/AddTrackToPlaylist", trackContent);
                        if (!trackResp.IsSuccessStatusCode)
                        {
                            var err = await trackResp.Content.ReadAsStringAsync();
                            successMessage = $"Brano non agganciato: {(int)trackResp.StatusCode} - {err}";
                            showSuccessMessage = true;
                            await Task.Delay(3000);
                            showSuccessMessage = false;
                        }
                    }
                }

                playlistCreated = true;
                successMessage = $"Playlist '{playlistName}' creata e brani agganciati ({selectedSongs.Count}).";
                showSuccessMessage = true;

                // Reset form dopo 3s
                await Task.Delay(3000);
                showSuccessMessage = false;
                selectedSongs.Clear();
                playlistName = "My Playlist";
                isPrivate = false;
                playlistCreated = false;
            }
            else
            {
                var errorBody = await response.Content.ReadAsStringAsync();
                successMessage = $"Errore creazione playlist ({(int)response.StatusCode}): {errorBody}";
                showSuccessMessage = true;
                await Task.Delay(4000);
                showSuccessMessage = false;
            }
        }
        catch (Exception ex)
        {
            successMessage = $"Errore di rete: {ex.Message}";
            showSuccessMessage = true;
            await Task.Delay(4000);
            showSuccessMessage = false;
        }
        finally
        {
            isCreating = false;
            StateHasChanged();
        }
    }

private void OnPrivacyChanged()
    {
    StateHasChanged();
    }

private void OnSearchKeyUp(KeyboardEventArgs e)
  {
      if (string.IsNullOrWhiteSpace(searchQuery))
    {
 filteredSongs = allSongs;
    }
  else
     {
    filteredSongs = allSongs
.Where(s => s.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
 s.Artist.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
   s.Album.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
    .ToList();
      }
        currentPage = 1;
        StateHasChanged();
    }

    private void ToggleSongSelection(Song song)
    {
        if (selectedSongs.Contains(song))
{
  selectedSongs.Remove(song);
        }
     else
  {
 selectedSongs.Add(song);
        }
 StateHasChanged();
    }

    private string GetTotalDuration()
    {
        if (selectedSongs.Count == 0) return "";
  
        var totalSeconds = selectedSongs.Sum(s => s.DurationSeconds);
var minutes = totalSeconds / 60;
        
      if (minutes < 60)
    {
     return $", {minutes}min";
        }
        
        var hours = minutes / 60;
  var remainingMinutes = minutes % 60;
  return $", {hours}hr {remainingMinutes}min";
    }

public class Song
    {
        public string Id { get; set; } = string.Empty;
       public string Title { get; set; } = string.Empty;
        public string Artist { get; set; } = string.Empty;
public string Album { get; set; } = string.Empty;
        public string Duration { get; set; } = string.Empty;
        public int DurationSeconds { get; set; }
public string CoverUrl { get; set; } = string.Empty;
  }
    

    public class PlaylistModel
    {
        public string Id { get; set; } = string.Empty;
        public string Nome { get; set; } = string.Empty;
        public bool Privata { get; set; }
    }

    private class RandomViewResponse
    {
        public List<ItemModel> Songs { get; set; } = new();
    }

    private class ItemModel
    {
        public string Id { get; set; } = string.Empty;
        public string Nome { get; set; } = string.Empty;
        public string Artista { get; set; } = string.Empty;
    }

    private string GenerateCoverSvg(string gradient, string title, string artist)
    {
        var safeTitle = System.Web.HttpUtility.HtmlEncode(title);
        var safeArtist = System.Web.HttpUtility.HtmlEncode(artist);
        var svg = $"<svg xmlns='http://www.w3.org/2000/svg' width='300' height='300'>" +
                  "<defs><linearGradient id='g' x1='0%' y1='0%' x2='100%' y2='100%'>" +
                  "<stop offset='0%' style='stop-color:#667eea;stop-opacity:1' />" +
                  "<stop offset='100%' style='stop-color:#764ba2;stop-opacity:1' />" +
                  "</linearGradient></defs>" +
                  "<rect fill='url(#g)' width='300' height='300'/><circle cx='150' cy='120' r='50' fill='rgba(255,255,255,0.1)'/>" +
                  $"<text x='50%' y='85%' dominant-baseline='middle' text-anchor='middle' font-family='Arial,sans-serif' font-size='22' font-weight='bold' fill='white'>{safeTitle}</text>" +
                  $"<text x='50%' y='92%' dominant-baseline='middle' text-anchor='middle' font-family='Arial,sans-serif' font-size='14' fill='rgba(255,255,255,0.7)'>{safeArtist}</text>" +
                  "</svg>";
        return "data:image/svg+xml," + Uri.EscapeDataString(svg);
    }

    private void GoToPage(int page)
    {
        currentPage = Math.Min(Math.Max(page, 1), TotalPages);
        StateHasChanged();
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (currentPage < TotalPages)
        {
            currentPage++;
            StateHasChanged();
        }
    }

    private void RecalculateSongsPerPage(int width)
    {
        songsPerPage = width switch
        {
            >= 1400 => 20,
            >= 1200 => 16,
            >= 992 => 12,
            >= 768 => 8,
            _ => 5
        };
        currentPage = Math.Min(currentPage, TotalPages);
        StateHasChanged();
    }

    [JSInvokable]
    public Task OnClientResized(int width)
    {
        RecalculateSongsPerPage(width);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        dotNetRef?.Dispose();
        _ = JS.InvokeVoidAsync("spotignete.unregisterResize");
    }
}

<style>
    * {
        box-sizing: border-box;
    }

    /* Wrapper consistente con Library.razor */
    .playlist-page {
        background-color: #000;
        color: #ffffff;
        min-height: 100vh;
    }

    .playlist-container {
     display: flex;
        gap: 0;
    background-color: #121212;
        border-radius: 1rem;
        min-height: 100vh;
    }

    /* SIDEBAR */
    .playlist-sidebar {
        width: 200px;
        padding: 20px 16px;
        background: #000;
        display: flex;
        flex-direction: column;
        align-items: center;
gap: 16px;
        border-top-left-radius: 1rem;
        border-bottom-left-radius: 1rem;
    }

    .playlist-cover {
        width: 168px;
   height: 168px;
        background: #2a2a2a;
        border-radius: 4px;
        display: flex;
      align-items: center;
        justify-content: center;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
    }

    .playlist-icon {
        width: 56px;
    height: 56px;
        color: #7f7f7f;
    }

    .create-playlist-btn {
        width: 100%;
        padding: 10px 20px;
        background: #1db954;
        color: #000;
        border: none;
        border-radius: 20px;
        font-size: 13px;
        font-weight: 700;
     cursor: pointer;
        transition: all 0.15s ease;
    }

    .create-playlist-btn:hover {
        background: #1ed760;
   transform: scale(1.04);
    }

    .create-hint {
        font-size: 11px;
  color: #a7a7a7;
      text-align: center;
        line-height: 1.4;
        padding: 0 8px;
    }

.success-message {
     font-size: 12px;
 color: #1db954;
        text-align: center;
        line-height: 1.4;
 padding: 12px;
  background: rgba(0, 255, 128, 0.1);
 border: 1px solid #1db954;
        border-radius: 8px;
 animation: slideIn 0.3s ease-out;
    }

    .error-message {
        font-size: 12px;
     color: #ff4444;
   text-align: center;
     line-height: 1.4;
        padding: 12px;
  background: rgba(255, 68, 68, 0.1);
        border: 1px solid #ff4444;
        border-radius: 8px;
      animation: slideIn 0.3s ease-out;
    }

    @@keyframes slideIn {
  from {
       opacity: 0;
  transform: translateY(-10px);
     }
to {
     opacity: 1;
transform: translateY(0);
  }
    }

.create-playlist-hint {
  margin: 16px 0 24px 0;
 padding: 12px 16px;
     background: rgba(29, 185, 84, 0.1);
  border-left: 3px solid #1db954;
 border-radius: 4px;
    }

    .create-playlist-hint p {
     margin: 0;
  font-size: 13px;
   color: #b3b3b3;
   }

    /* MAIN CONTENT */
  .playlist-content {
        flex: 1;
   padding: 24px 32px;
        overflow-y: auto;
background: #121212;
  border-top-right-radius: 1rem;
        border-bottom-right-radius: 1rem;
  }

    .playlist-header {
      margin-bottom: 32px;
    }

    .playlist-label {
      font-size: 11px;
     font-weight: 700;
        color: #fff;
        letter-spacing: 1.5px;
  margin-bottom: 12px;
    }

    .playlist-title {
   font-size: 96px;
 font-weight: 900;
        margin: 0 0 16px 0;
    color: #6a6a6a;
   letter-spacing: -0.04em;
    line-height: 0.9;
  outline: none;
   cursor: text;
   transition: color 0.2s ease;
   min-height: 90px;
        word-break: break-word;
 }

    .playlist-title:hover {
        color: #ffffff;
  }

  .playlist-title:focus {
     color: #ffffff;
 }

    .playlist-title-input {
     font-size: 96px;
      font-weight: 900;
     margin: 0 0 16px 0;
  color: #6a6a6a;
     letter-spacing: -0.04em;
   line-height: 0.9;
      background: transparent;
  border: none;
  outline: none;
    cursor: text;
        transition: color 0.2s ease;
        width: 100%;
 padding: 0;
 font-family: inherit;
    }

.playlist-title-input:hover,
    .playlist-title-input:focus {
  color: #ffffff;
    }

    .playlist-title-input::placeholder {
   color: #6a6a6a;
    opacity: 1;
    }

    .playlist-info {
        display: flex;
        align-items: center;
 gap: 12px;
        margin-top: 16px;
    }

    .song-count {
        font-size: 14px;
        color: #fff;
        font-weight: 400;
    }

  /* PRIVACY TOGGLE */
    .privacy-toggle {
     display: flex;
        align-items: center;
  gap: 6px;
    }

    .toggle-container {
      position: relative;
        display: inline-block;
    width: 40px;
        height: 22px;
    }

    .toggle-container input {
    opacity: 0;
    width: 0;
   height: 0;
    }

    .toggle-slider {
        position: absolute;
        cursor: pointer;
  top: 0;
 left: 0;
   right: 0;
        bottom: 0;
     background-color: #535353;
    transition: 0.3s;
        border-radius: 22px;
    }

    .toggle-slider:before {
    position: absolute;
        content: "";
        height: 16px;
 width: 16px;
    left: 3px;
    bottom: 3px;
 background-color: #000;
        transition: 0.3s;
        border-radius: 50%;
    }

  .toggle-container input:checked + .toggle-slider {
        background-color: #1db954;
    }

    .toggle-container input:checked + .toggle-slider:before {
      transform: translateX(18px);
        background-color: #fff;
    }

    .privacy-icon {
        display: flex;
align-items: center;
  color: #fff;
    }

    .privacy-text {
        font-size: 13px;
        color: #fff;
   font-weight: 400;
    }

    /* ADD SONGS */
    .add-songs-section {
        margin-top: 0;
    }

  .add-songs-header {
  display: flex;
        justify-content: space-between;
 align-items: center;
        margin-bottom: 24px;
    }

    .section-title {
   font-size: 24px;
        font-weight: 700;
      margin: 0;
   color: #fff;
    }

 .search-container {
 position: relative;
 width: 360px;
    }

    .search-icon {
   position: absolute;
left: 14px;
        top: 50%;
        transform: translateY(-50%);
        color: #a7a7a7;
      pointer-events: none;
    }

    .search-input {
        width: 100%;
        padding: 11px 14px 11px 40px;
        background: #242424;
   border: 1px solid #333;
        border-radius: 20px;
        color: #fff;
   font-size: 14px;
      outline: none;
  transition: all 0.3s ease;
    }

    .search-input::placeholder {
      color: #a7a7a7;
    }

    .search-input:focus {
   border-color: #1db954;
        background: #2a2a2a;
 }

 /* SONG TABLE */
 .song-table {
margin-top: 16px;
  }

    .song-table-header {
   display: grid;
    grid-template-columns: 48px 2fr 2fr 100px;
     gap: 16px;
    padding: 8px 16px;
        border-bottom: 1px solid #282828;
   font-size: 11px;
    font-weight: 600;
  color: #b3b3b3;
  letter-spacing: 0.8px;
    }

 .song-list {
   margin-top: 0;
    }

    .song-row {
     display: grid;
   grid-template-columns: 48px 2fr 2fr 100px;
     gap: 16px;
     padding: 10px 16px;
        border-radius: 4px;
   transition: all 0.3s ease-in-out;
        cursor: pointer;
        align-items: center;
    }

 .song-row:hover {
        background: #282828;
 }

 .song-row.selected {
 background: rgba(29, 185, 84, 0.15);
    }

    .col-check {
      display: flex;
 align-items: center;
      justify-content: center;
    }

    .checkbox-container {
   display: flex;
        cursor: pointer;
    }

    .checkbox-container input[type="checkbox"] {
        display: none;
    }

    .checkbox-custom {
     display: flex;
        align-items: center;
     justify-content: center;
        width: 20px;
     height: 20px;
        border: 2px solid #535353;
        border-radius: 3px;
        background: transparent;
     transition: all 0.15s ease;
    }

  .checkbox-custom:hover {
 border-color: #b3b3b3;
}

    .checkbox-custom.checked {
     background: #1db954;
    border-color: #1db954;
    }

    .col-title {
display: flex;
     align-items: center;
        gap: 12px;
    }

    .song-cover {
    width: 48px;
  height: 48px;
        border-radius: 4px;
        object-fit: cover;
        flex-shrink: 0;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
    }

    .song-details {
   min-width: 0;
flex: 1;
    }

 .song-name {
        font-size: 15px;
        font-weight: 400;
 color: #fff;
        margin-bottom: 4px;
      white-space: nowrap;
        overflow: hidden;
  text-overflow: ellipsis;
    }

 .song-name.selected-text {
        color: #1db954;
    }

    .song-artist {
        font-size: 13px;
        color: #b3b3b3;
        white-space: nowrap;
        overflow: hidden;
      text-overflow: ellipsis;
    }

    .col-album {
   font-size: 14px;
    color: #b3b3b3;
 white-space: nowrap;
      overflow: hidden;
        text-overflow: ellipsis;
    }

    .col-duration {
     font-size: 14px;
        color: #b3b3b3;
        text-align: right;
  }

    /* Scrollbar styling consistente */
    .playlist-content::-webkit-scrollbar {
        width: 8px;
 }

    .playlist-content::-webkit-scrollbar-track {
  background: transparent;
    }

    .playlist-content::-webkit-scrollbar-thumb {
        background-color: #282828;
     border-radius: 4px;
    }

    .playlist-content::-webkit-scrollbar-thumb:hover {
        background-color: #3e3e3e;
    }

    /* Pagination */
    .pagination {
        display: flex;
        align-items: center;
        gap: 12px;
        justify-content: flex-end;
        padding: 12px 16px;
        border-top: 1px solid #282828;
        margin-top: 8px;
    }
    .page-button {
        padding: 6px 12px;
        background: #242424;
        color: #fff;
        border: 1px solid #333;
        border-radius: 16px;
        font-size: 13px;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    .page-button:hover { background: #2a2a2a; }
    .page-button:disabled { opacity: 0.5; cursor: default; }
    .page-info { font-size: 13px; color: #b3b3b3; }

 /* RESPONSIVE */
    @@media (max-width: 1024px) {
  .playlist-title-input {
  font-size: 64px;
        }
   
      .add-songs-header {
      flex-direction: column;
     align-items: flex-start;
gap: 16px;
 }

      .search-container {
  width: 100%;
   max-width: 400px;
        }

  .song-table-header,
 .song-row {
      grid-template-columns: 48px 2fr 1.5fr 80px;
      }
    }

    @@media (max-width: 768px) {
     .playlist-container {
flex-direction: column;
         border-radius: 0;
 }

        .playlist-sidebar {
width: 100%;
   flex-direction: row;
    justify-content: center;
     padding: 16px;
 border-radius: 0;
     }

     .playlist-cover {
     width: 100px;
        height: 100px;
 }

 .playlist-icon {
    width: 40px;
  height: 40px;
        }

     .create-playlist-btn {
   max-width: 150px;
        }

   .create-hint {
       display: none;
  }

      .playlist-content {
      border-radius: 0;
        }

    .playlist-title-input {
         font-size: 40px;
 }

        .col-album {
 display: none;
    }

      .song-table-header,
.song-row {
         grid-template-columns: 40px 1fr 60px;
   }
    }
</style>