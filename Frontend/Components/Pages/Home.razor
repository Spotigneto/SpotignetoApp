@page "/"
@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http

<PageTitle>SpotignetoApp</PageTitle>

<div class="home-page">
    <!-- Hero Section -->
    <section class="hero-section">
      <h1 class="hero-title">
            IT'S YOUR FRIEND <span class="highlight">CANDICE</span>'S BIRTHDAY!
  </h1>
        <p class="hero-subtitle">Let's celebrate by listening to some of his favourite music</p>

        <div class="hero-carousel">
      @foreach (var album in heroAlbums)
{
   <div class="hero-album" @onclick="() => PlayAlbum(album)">
   <div class="hero-album-cover">
        @if (!string.IsNullOrEmpty(album.ImageUrl))
     {
           <img src="@album.ImageUrl" alt="@album.Title" class="album-image" />
          }
         else
  {
     <div class="album-placeholder" style="background: @album.Gradient;"></div>
             }
     <div class="hero-album-overlay">
  <button class="hero-play-btn" @onclick:stopPropagation="true" @onclick="() => PlayAlbum(album)" aria-label="Play @album.Title">
  <svg width="28" height="28" viewBox="0 0 24 24" fill="currentColor">
           <path d="M8 5v14l11-7z" />
  </svg>
                 </button>
     </div>
    </div>
    <div class="hero-album-title">@album.Title</div>
</div>
  }
        </div>
    </section>

  <!-- Discover new song Section -->
    <section class="content-section">
        <h2 class="section-title">Discover new song</h2>
        <div class="albums-row">
            @foreach (var album in recentlyPlayed)
            {
  <div class="album-item" @onclick="() => SelectAlbum(album)">
 <div class="album-cover">
         @if (!string.IsNullOrEmpty(album.ImageUrl))
             {
          <img src="@album.ImageUrl" alt="@album.Title" class="album-image" />
         }
     else
             {
       <div class="album-placeholder" style="background: @album.Gradient;"></div>
         }
         <div class="album-hover">
        <button class="play-button @(album.IsPlaying ? "play-button-visible" : "")" 
  @onclick:stopPropagation="true"
     @onclick="() => TogglePlay(album)"
 aria-label="@(album.IsPlaying ? "Pause" : "Play") @album.Title">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
  @if (album.IsPlaying)
   {
         <path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z" />
      }
   else
      {
  <path d="M8 5v14l11-7z" />
  }
         </svg>
     </button>
       </div>
                 </div>
        <div class="album-details">
       <div class="album-title">@album.Title</div>
          <div class="album-artist">@album.Artist</div>
  </div>
           </div>
      }
      </div>
    </section>

    <!-- Some Artists Section -->
    <section class="content-section">
    <h2 class="section-title">Some Artists</h2>
        <div class="albums-row">
         @foreach (var album in discoverAlbums)
   {
                <div class="album-item" @onclick="() => SelectAlbum(album)">
  <div class="album-cover">
 @if (!string.IsNullOrEmpty(album.ImageUrl))
  {
          <img src="@album.ImageUrl" alt="@album.Title" class="album-image" />
     }
              else
     {
      <div class="album-placeholder" style="background: @album.Gradient;"></div>
               }
      <div class="album-hover">
       <button class="play-button" 
      @onclick:stopPropagation="true"
    @onclick="() => PlayAlbum(album)"
       aria-label="Play @album.Title">
     <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
       <path d="M8 5v14l11-7z" />
         </svg>
     </button>
           </div>
               </div>
       <div class="album-details">
      <div class="album-title">@album.Title</div>
       <div class="album-artist">@album.Artist</div>
  </div>
      </div>
            }
        </div>
    </section>
</div>

@code {
    private List<Album> heroAlbums = new();
    private List<Album> recentlyPlayed = new();
    private List<Album> discoverAlbums = new();
    private Album? currentlyPlaying;

    // Simple model matching the backend Home random payload
    private class ItemModel
    {
        public string Id { get; set; } = string.Empty;
        public string Nome { get; set; } = string.Empty;
    }

    private class HomeRandomResponse
    {
        public List<ItemModel> Albums { get; set; } = new();
        public List<ItemModel> Songs { get; set; } = new();
        public List<ItemModel> Artists { get; set; } = new();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadRandomHomeAsync();
    }

    private async Task LoadRandomHomeAsync()
    {
        try
        {
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var data = await Http.GetFromJsonAsync<HomeRandomResponse>("api/Home/Random_View?albums=8&songs=8&artists=4", options);
            MapRandomToUI(data ?? new HomeRandomResponse());
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Home random load failed: {ex}");
            // Keep lists empty on failure to respect 'only DB elements'
            heroAlbums = new List<Album>();
            recentlyPlayed = new List<Album>();
            discoverAlbums = new List<Album>();
        }
    }

    private void MapRandomToUI(HomeRandomResponse data)
    {
        var gradients = new[]
        {
            "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)",
            "linear-gradient(135deg, #4158d0 0%, #c850c0 100%)",
            "linear-gradient(135deg, #fa709a 0%, #fee140 100%)",
            "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
            "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
            "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
            "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)",
            "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
        };

        // Albums in hero carousel
        heroAlbums = data.Albums.Select((pl, i) => new Album
        {
            Id = pl.Id,
            Title = pl.Nome,
            Artist = string.Empty,
            ImageUrl = string.Empty,
            Gradient = gradients[i % gradients.Length]
        }).ToList();

        // Songs -> Recently Played
        recentlyPlayed = data.Songs.Select((s, i) => new Album
        {
            Id = s.Id,
            Title = s.Nome,
            Artist = string.Empty,
            ImageUrl = string.Empty,
            Gradient = gradients[i % gradients.Length],
            IsPlaying = false
        }).ToList();
        currentlyPlaying = null;

        // Artists -> Discover section
        discoverAlbums = data.Artists.Select((a, i) => new Album
        {
            Id = a.Id,
            Title = a.Nome,
            Artist = string.Empty,
            ImageUrl = string.Empty,
            Gradient = gradients[i % gradients.Length]
        }).ToList();
    }

    private void PlayAlbum(Album album)
    {
     if (currentlyPlaying != null)
        {
            currentlyPlaying.IsPlaying = false;
        }

 album.IsPlaying = true;
        currentlyPlaying = album;
   
Console.WriteLine($"Playing: {album.Title} by {album.Artist}");
    }

    private void TogglePlay(Album album)
    {
        if (album.IsPlaying)
    {
            album.IsPlaying = false;
            currentlyPlaying = null;
        }
        else
        {
     if (currentlyPlaying != null)
     {
    currentlyPlaying.IsPlaying = false;
            }
            album.IsPlaying = true;
 currentlyPlaying = album;
        }

     Console.WriteLine($"{(album.IsPlaying ? "Playing" : "Paused")}: {album.Title}");
    }

    private void SelectAlbum(Album album)
    {
        Console.WriteLine($"Selected: {album.Title} by {album.Artist}");
    }

    private class Album
    {
        public string Id { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public string Artist { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public string Gradient { get; set; } = string.Empty;
        public bool IsPlaying { get; set; }
        public bool IsFeatured { get; set; }
    }
}

<style>
    .home-page {
        color: #fff;
padding: 0;
        max-width: 100%;
        overflow-x: hidden;
    }

    /* Hero Section */
    .hero-section {
        background: linear-gradient(180deg, rgba(80, 80, 80, 0.3) 0%, rgba(18, 18, 18, 0) 100%);
    padding: 24px 24px 48px;
      margin-bottom: 32px;
    }

  .hero-title {
        font-size: 48px;
        font-weight: 900;
   margin: 0 0 8px 0;
    color: #fff;
        letter-spacing: -0.04em;
        line-height: 1.2;
    }

    .hero-title .highlight {
        color: #1db954;
    }

 .hero-subtitle {
        font-size: 14px;
        color: #a7a7a7;
        margin: 0 0 32px 0;
        font-weight: 400;
    }

    .hero-carousel {
     display: flex;
    gap: 20px;
        overflow-x: auto;
        padding: 8px 0;
        scroll-behavior: smooth;
        scrollbar-width: none;
    }

    .hero-carousel::-webkit-scrollbar {
      display: none;
 }

    .hero-album {
        flex-shrink: 0;
        transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
    }

    .hero-album:hover {
        transform: scale(1.02);
    }

    .hero-album-cover {
        width: 180px;
      height: 180px;
        border-radius: 8px;
        position: relative;
        overflow: hidden;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
    }

    .hero-album:hover .hero-album-cover {
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.6);
    }

    .album-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
    }

    .album-placeholder {
    width: 100%;
        height: 100%;
    }

    .hero-album-overlay {
        position: absolute;
        inset: 0;
        background: rgba(0, 0, 0, 0.4);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
    transition: opacity 0.3s ease;
    }

    .hero-album:hover .hero-album-overlay {
        opacity: 1;
    }

    .hero-play-btn {
     width: 56px;
  height: 56px;
        border-radius: 50%;
        background-color: #1db954;
      border: none;
        color: #000;
  cursor: pointer;
     display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    }

    .hero-play-btn:hover {
        transform: scale(1.06);
        background-color: #1ed760;
    }

    .hero-play-btn:active {
        transform: scale(0.98);
    }

    .hero-play-btn svg {
        margin-left: 2px;
    }

    .hero-album-title {
        width: 180px;
        font-size: 14px;
        font-weight: 700;
        color: #fff;
        margin-top: 8px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        user-select: none;
    }

    /* Content Sections */
    .content-section {
    padding: 0 24px;
      margin-bottom: 48px;
    }

 .section-title {
        font-size: 24px;
        font-weight: 700;
        margin: 0 0 20px 0;
        color: #fff;
    letter-spacing: -0.04em;
 }

    .albums-row {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 20px;
    }

    .album-item {
        position: relative;
        cursor: pointer;
 transition: transform 0.2s ease;
        background: rgba(255, 255, 255, 0.05);
        padding: 16px;
        border-radius: 8px;
    }

    .album-item:hover {
   background: rgba(255, 255, 255, 0.1);
   transform: translateY(-4px);
    }

    .album-cover {
        width: 100%;
        aspect-ratio: 1;
        border-radius: 4px;
        position: relative;
        overflow: hidden;
 box-shadow: 0 8px 24px rgba(0, 0, 0, 0.5);
        margin-bottom: 16px;
        transition: box-shadow 0.3s ease;
    }

    .album-item:hover .album-cover {
     box-shadow: 0 12px 32px rgba(0, 0, 0, 0.6);
    }

    .album-hover {
        position: absolute;
        inset: 0;
   background: rgba(0, 0, 0, 0.4);
        display: flex;
        align-items: flex-end;
        justify-content: flex-end;
 padding: 12px;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .album-item:hover .album-hover {
        opacity: 1;
    }

    .play-button {
        width: 48px;
        height: 48px;
        border-radius: 50%;
 background-color: #1db954;
        border: none;
     color: #000;
        cursor: pointer;
        display: flex;
        align-items: center;
   justify-content: center;
 transition: all 0.2s ease;
        box-shadow: 0 8px 8px rgba(0, 0, 0, 0.3);
   transform: translateY(8px);
    }

    .album-item:hover .play-button {
 transform: translateY(0);
    }

    .play-button:hover {
        transform: scale(1.05) translateY(0);
        background-color: #1ed760;
    }

    .play-button:active {
        transform: scale(0.98) translateY(0);
    }

  .play-button-visible {
        opacity: 1;
    transform: translateY(0);
    }

    .play-button svg {
        margin-left: 2px;
    }

    .album-details {
        padding: 0;
        user-select: none;
    }

    .album-title {
        font-size: 16px;
        font-weight: 700;
        color: #fff;
        margin-bottom: 8px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .album-artist {
      font-size: 14px;
   color: #b3b3b3;
        font-weight: 400;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    /* Responsive Design */
    @@media (max-width: 1200px) {
    .albums-row {
         grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
 }
    }

    @@media (max-width: 992px) {
        .albums-row {
        grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
        }

     .hero-title {
    font-size: 36px;
        }

      .hero-album-cover {
            width: 160px;
         height: 160px;
        }
    }

    @@media (max-width: 768px) {
        .albums-row {
            grid-template-columns: repeat(2, 1fr);
            gap: 16px;
        }

        .hero-title {
    font-size: 28px;
        }

        .section-title {
            font-size: 20px;
        }

        .hero-album-cover {
   width: 140px;
    height: 140px;
        }
    }

    @@media (max-width: 480px) {
  .hero-title {
    font-size: 24px;
        }

        .albums-row {
     grid-template-columns: repeat(2, 1fr);
      }
    }

    /* Accessibility */
    .play-button:focus-visible,
    .hero-play-btn:focus-visible {
        outline: 2px solid #1db954;
        outline-offset: 2px;
    }

    /* Animation for playing state */
    @@keyframes pulse {
        0%, 100% {
            opacity: 1;
        }
        50% {
  opacity: 0.5;
  }
    }

    .play-button-visible {
        animation: pulse 2s ease-in-out infinite;
    }
</style>