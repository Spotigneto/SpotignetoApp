@page "/library"
@using System.Text.Json
@inject HttpClient Http

<div class="library-container">
    <h1 class="library-title">Your Library</h1>
    
    <h2 class="section-title">Playlists</h2>
    
    @if (isLoading)
    {
        <div class="loading-message">Caricamento playlist...</div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
    else if (playlists != null && playlists.Any())
    {
        <!-- Playlist Grid -->
        <div class="playlists-grid">
            @foreach (var playlist in playlists.Take(4))
            {
                <div class="playlist-card" @onclick="() => SelectPlaylist(playlist)">
                    <div class="playlist-color" style="background: @GetRandomGradient();"></div>
                    <div class="playlist-info">
                        <div class="playlist-name">@playlist.Nome</div>
                        <div class="playlist-type">@(playlist.Privata ? "Playlist Privata" : "Playlist")</div>
                        <div class="playlist-stats">
                            <span class="stat-number">0</span>
                            <span>songs</span>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        @if (playlists.Count() > 4)
        {
            <div class="see-all" @onclick="ShowAllPlaylists">See all (@playlists.Count())</div>
        }
    }
    else
    {
        <div class="no-playlists">
            <p>Nessuna playlist trovata.</p>
            <a href="/playlist" class="create-playlist-link">Crea la tua prima playlist</a>
        </div>
    }
    
    <div class="divider"></div>
    
    @if (showAllPlaylists && playlists != null && playlists.Count() > 4)
    {
        <!-- Additional Playlists -->
        <div class="additional-playlists">
            @foreach (var playlist in playlists.Skip(4))
            {
                <div class="single-playlist" @onclick="() => SelectPlaylist(playlist)">
                    <div class="playlist-color" style="background: @GetRandomGradient();"></div>
                    <div class="playlist-info">
                        <div class="playlist-name">@playlist.Nome</div>
                        <div class="playlist-type">@(playlist.Privata ? "Playlist Privata" : "Playlist")</div>
                        <div class="playlist-stats">
                            <span class="stat-number">0</span>
                            <span>songs</span>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .library-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 24px;
    }

    .library-title {
        font-size: 32px;
        font-weight: 900;
        margin-bottom: 24px;
        color: #fff;
    }

    .section-title {
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 16px;
        color: #fff;
    }

    /* Loading and Error Messages */
    .loading-message {
        color: #b3b3b3;
        font-size: 16px;
        text-align: center;
        padding: 40px 0;
    }

    .error-message {
        color: #ff6b6b;
        font-size: 14px;
        padding: 12px 16px;
        background: rgba(255, 107, 107, 0.1);
        border-radius: 8px;
        border: 1px solid rgba(255, 107, 107, 0.3);
        margin-bottom: 20px;
    }

    .no-playlists {
        text-align: center;
        padding: 40px 0;
        color: #b3b3b3;
    }

    .no-playlists p {
        font-size: 16px;
        margin-bottom: 16px;
    }

    .create-playlist-link {
        color: #1db954;
        text-decoration: none;
        font-weight: 600;
        font-size: 14px;
        padding: 8px 16px;
        border: 1px solid #1db954;
        border-radius: 6px;
        display: inline-block;
        transition: all 0.2s ease;
    }

    .create-playlist-link:hover {
        background: rgba(29, 185, 84, 0.1);
    }

    /* Playlist Grid */
    .playlists-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 16px;
        margin-bottom: 32px;
    }

    .playlist-card {
        background-color: #181818;
        border-radius: 8px;
        padding: 16px;
        transition: background-color 0.3s;
        cursor: pointer;
        display: flex;
        align-items: flex-start;
        gap: 16px;
    }

    .playlist-card:hover {
        background-color: #282828;
    }

    .playlist-color {
        width: 60px;
        height: 60px;
        border-radius: 8px;
        flex-shrink: 0;
    }

    .playlist-info {
        flex: 1;
    }

    .playlist-name {
        font-size: 16px;
        font-weight: 700;
        color: #fff;
        margin-bottom: 4px;
    }

    .playlist-type {
        font-size: 14px;
        color: #b3b3b3;
        margin-bottom: 4px;
    }

    .playlist-description {
        font-size: 12px;
        color: #b3b3b3;
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .playlist-stats {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 12px;
        color: #b3b3b3;
        margin-top: 4px;
    }

    .stat-number {
        font-size: 14px;
        font-weight: 600;
        color: #fff;
    }

    .stat-divider {
        color: #535353;
    }

    .see-all {
        color: #b3b3b3;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: color 0.2s;
        margin-bottom: 24px;
        display: inline-block;
    }

    .see-all:hover {
        color: #fff;
    }

    .divider {
        height: 1px;
        background-color: #282828;
        margin: 24px 0;
    }

    /* Additional playlists section */
    .additional-playlists {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 16px;
    }

    /* Single playlist card (for additional playlists) */
    .single-playlist {
        background-color: #181818;
        border-radius: 8px;
        padding: 16px;
        display: flex;
        align-items: flex-start;
        gap: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .single-playlist:hover {
        background-color: #282828;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .playlists-grid,
        .additional-playlists {
            grid-template-columns: 1fr;
        }
        
        .library-title {
            font-size: 24px;
        }
        
        .section-title {
            font-size: 20px;
        }
    }
</style>

@code {
    private List<PlaylistModel>? playlists;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private bool showAllPlaylists = false;
    private readonly string[] gradients = {
        "linear-gradient(135deg, #450af5 0%, #c4efd9 100%)",
        "linear-gradient(135deg, #f093fb 0%, #f5576c 100%)",
        "linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)",
        "linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)",
        "linear-gradient(135deg, #fa709a 0%, #fee140 100%)",
        "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
        "linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%)",
        "linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPlaylists();
    }

    private async Task LoadPlaylists()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var response = await Http.GetAsync("api/Records/playlists");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                playlists = JsonSerializer.Deserialize<List<PlaylistModel>>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                errorMessage = $"Errore nel caricamento delle playlist: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Errore: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAllPlaylists()
    {
        showAllPlaylists = !showAllPlaylists;
    }

    private void SelectPlaylist(PlaylistModel playlist)
    {
        // TODO: Navigate to playlist detail page or implement playlist selection logic
        Console.WriteLine($"Selected playlist: {playlist.Nome}");
    }

    private string GetRandomGradient()
    {
        var random = new Random();
        return gradients[random.Next(gradients.Length)];
    }

    public class PlaylistModel
    {
        public long Id { get; set; }
        public string Nome { get; set; } = string.Empty;
        public bool Privata { get; set; }
    }
}