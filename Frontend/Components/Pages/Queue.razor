@page "/queue"

<PageTitle>Queue - Spotigneto</PageTitle>

<div class="queue-page">
    <!-- Header Section -->
    <section class="queue-header">
      <h1 class="queue-title">Queue</h1>
      <div class="queue-stats">
        <span class="queue-count">@queueTracks.Count tracks in queue</span>
            <span class="queue-separator">•</span>
<span class="queue-duration">@totalDuration total</span>
    </div>
      <div class="queue-actions">
            <button class="action-btn shuffle-btn" @onclick="ShuffleQueue" aria-label="Shuffle Queue">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
         <path d="M11 2h3v3M2 8.5h12M11 14h3v-3M14 2l-3.5 3.5M14 14l-3.5-3.5" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
           Shuffle
            </button>
   <button class="action-btn clear-btn" @onclick="ClearQueue" aria-label="Clear Queue">
           <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                 <path d="M2 4h12M6 2h4" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
     <path d="M5 4v8a1 1 0 001 1h4a1 1 0 001-1V4" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round" stroke-linejoin="round"/>
      <path d="M6.5 7v4M9.5 7v4" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round"/>
         </svg>
              Clear Queue
      </button>
        </div>
    </section>

    <!-- Now Playing Section -->
    <section class="now-playing-section">
        <h2 class="section-title">Now Playing</h2>
        @if (nowPlaying != null)
        {
  <div class="now-playing-card">
            <div class="now-playing-content">
          <div class="track-cover-large" style="background: @nowPlaying.Gradient;">
   @if (!string.IsNullOrEmpty(nowPlaying.ImageUrl))
         {
                <img src="@nowPlaying.ImageUrl" alt="@nowPlaying.Title" />
            }
   </div>
       <div class="now-playing-info">
  <div class="track-title-large">@nowPlaying.Title</div>
            <div class="track-metadata">
   <span class="track-artist-large">@nowPlaying.Artist</span>
           <span class="metadata-separator">•</span>
      <span class="track-album-large">@nowPlaying.Album</span>
      </div>
<div class="playback-controls">
         <div class="progress-section">
               <div class="time-current">@currentTime</div>
       <div class="progress-bar-container">
     <div class="progress-bar">
    <div class="progress-bar-fill" style="width: @progressPercent%;"></div>
        </div>
            </div>
          <div class="time-total">@nowPlaying.Duration</div>
   </div>
  <div class="control-buttons">
  <button class="control-btn play-btn-large" @onclick="TogglePlay" aria-label="Play/Pause">
                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
         <circle cx="10" cy="10" r="10" fill="#1db954" />
        <path d="M8 6v8l6-4z" fill="#000" />
          </svg>
            </button>
              <button class="control-btn skip-btn" @onclick="SkipNext" aria-label="Skip">
     <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
     <path d="M5 4v12l8-6-8-6zM14 4h2v12h-2V4z" />
       </svg>
       </button>
           <button class="control-btn icon-btn" @onclick="ToggleLike" aria-label="Like">
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor">
     <path d="M10 17s-6-4-6-7.5c0-2 1.5-3.5 3.5-3.5 1.5 0 2.5 1 2.5 1s1-1 2.5-1C14.5 6 16 7.5 16 9.5c0 3.5-6 7.5-6 7.5z" stroke-width="1.5"/>
 </svg>
      </button>
      <button class="control-btn icon-btn" @onclick="AddToPlaylist" aria-label="Add to playlist">
   <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
   <path d="M10 5v10M5 10h10" stroke="currentColor" stroke-width="1.5" fill="none" stroke-linecap="round"/>
 </svg>
             </button>
     <button class="control-btn icon-btn" aria-label="More options">
           <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
     <circle cx="10" cy="5" r="1.5" />
    <circle cx="10" cy="10" r="1.5" />
     <circle cx="10" cy="15" r="1.5" />
      </svg>
        </button>
          </div>
  </div>
   </div>
    </div>
            </div>
}
    </section>

    <!-- Queue List Section -->
    <section class="queue-list-section">
        <h2 class="section-title">Next in Queue</h2>
        <div class="queue-table">
            <div class="queue-table-header">
     <div class="header-number">#</div>
       <div class="header-title">TITLE</div>
   <div class="header-album">ALBUM</div>
       <div class="header-duration">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor">
   <circle cx="8" cy="8" r="6.5" stroke-width="1.5" />
    <path d="M8 5v3l2 2" stroke-width="1.5" stroke-linecap="round"/>
         </svg>
         </div>
          </div>

      <div class="queue-table-body">
           @foreach (var track in queueTracks)
 {
      <div class="queue-track-row @(track.Id == hoveredTrackId ? "hovered" : "")" 
 @onmouseenter="() => hoveredTrackId = track.Id"
             @onmouseleave="() => hoveredTrackId = null">
        <div class="track-number">
            @if (hoveredTrackId == track.Id)
   {
    <button class="play-icon-btn" @onclick="() => PlayTrack(track)" aria-label="Play @track.Title">
           <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
            <path d="M5 3v10l8-5z" />
    </svg>
     </button>
              }
    else
           {
           <span>@track.Position</span>
             }
</div>
      <div class="track-main">
         <div class="track-cover" style="background: @track.Gradient;">
       @if (!string.IsNullOrEmpty(track.ImageUrl))
          {
  <img src="@track.ImageUrl" alt="@track.Title" />
      }
     </div>
                <div class="track-info">
           <div class="track-title">@track.Title</div>
        <div class="track-artist">@track.Artist</div>
             </div>
       </div>
       <div class="track-album">@track.Album</div>
  <div class="track-duration">@track.Duration</div>
        </div>
     }
            </div>
        </div>
    </section>

    <!-- Recently Played Section -->
    <section class="recently-played-section">
     <h2 class="section-title">Recently Played</h2>
 <div class="queue-table">
      <div class="queue-table-header">
     <div class="header-number">#</div>
       <div class="header-title">TITLE</div>
  <div class="header-album">ALBUM</div>
             <div class="header-duration">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor">
           <circle cx="8" cy="8" r="6.5" stroke-width="1.5" />
    <path d="M8 5v3l2 2" stroke-width="1.5" stroke-linecap="round"/>
           </svg>
   </div>
      </div>

     <div class="queue-table-body">
        @foreach (var track in recentlyPlayedTracks)
                {
      <div class="queue-track-row @(track.Id == hoveredTrackId ? "hovered" : "")" 
            @onmouseenter="() => hoveredTrackId = track.Id"
           @onmouseleave="() => hoveredTrackId = null">
      <div class="track-number">
                @if (hoveredTrackId == track.Id)
            {
      <button class="play-icon-btn" @onclick="() => PlayTrack(track)" aria-label="Play @track.Title">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
  <path d="M5 3v10l8-5z" />
       </svg>
       </button>
             }
           else
        {
   <span>@track.Position</span>
  }
     </div>
           <div class="track-main">
   <div class="track-cover" style="background: @track.Gradient;">
          @if (!string.IsNullOrEmpty(track.ImageUrl))
        {
         <img src="@track.ImageUrl" alt="@track.Title" />
         }
            </div>
        <div class="track-info">
            <div class="track-title">@track.Title</div>
          <div class="track-artist">@track.Artist</div>
          </div>
          </div>
           <div class="track-album">@track.Album</div>
       <div class="track-duration">@track.Duration</div>
             </div>
}
        </div>
        </div>
    </section>
</div>

@code {
    private Track? nowPlaying;
    private List<Track> queueTracks = new();
    private List<Track> recentlyPlayedTracks = new();
    private int? hoveredTrackId;
    private string totalDuration = "21min total";
    private string currentTime = "1:42";
    private int progressPercent = 48;
    private bool isPlaying = true;

    protected override void OnInitialized()
    {
        InitializeNowPlaying();
InitializeQueue();
        InitializeRecentlyPlayed();
    }

    private void InitializeNowPlaying()
    {
        nowPlaying = new Track
        {
            Id = 0,
            Position = 0,
            Title = "Say My Name",
          Artist = "ODESZA, Zyra",
        Album = "In Return",
        Duration = "3:59",
  ImageUrl = "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=300&h=300&fit=crop",
          Gradient = "linear-gradient(135deg, #4158d0 0%, #c850c0 100%)"
        };
    }

    private void InitializeQueue()
    {
        queueTracks = new List<Track>
    {
     new Track { Id = 1, Position = 1, Title = "A Moment Apart", Artist = "ODESZA", Album = "A Moment Apart", Duration = "3:33", ImageUrl = "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?w=300&h=300&fit=crop", Gradient = "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)" },
       new Track { Id = 2, Position = 2, Title = "It's Only", Artist = "ODESZA, Zyra", Album = "In Return", Duration = "4:47", ImageUrl = "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=300&h=300&fit=crop", Gradient = "linear-gradient(135deg, #4158d0 0%, #c850c0 100%)" },
            new Track { Id = 3, Position = 3, Title = "Line of Sight", Artist = "ODESZA, Wynne, Mansionair", Album = "A Moment Apart", Duration = "4:29", ImageUrl = "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?w=300&h=300&fit=crop", Gradient = "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)" },
            new Track { Id = 4, Position = 4, Title = "Bloom", Artist = "ODESZA", Album = "In Return", Duration = "4:34", ImageUrl = "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=300&h=300&fit=crop", Gradient = "linear-gradient(135deg, #4158d0 0%, #c850c0 100%)" }
        };
    }

    private void InitializeRecentlyPlayed()
    {
        recentlyPlayedTracks = new List<Track>
        {
            new Track { Id = 5, Position = 1, Title = "Higher Ground", Artist = "ODESZA", Album = "A Moment Apart", Duration = "3:46", ImageUrl = "https://images.unsplash.com/photo-1514320291840-2e0a9bf2a9ae?w=300&h=300&fit=crop", Gradient = "linear-gradient(135deg, #e0c3fc 0%, #8ec5fc 100%)" },
     new Track { Id = 6, Position = 2, Title = "Late Night", Artist = "ODESZA", Album = "In Return", Duration = "3:52", ImageUrl = "https://images.unsplash.com/photo-1470225620780-dba8ba36b745?w=300&h=300&fit=crop", Gradient = "linear-gradient(135deg, #4158d0 0%, #c850c0 100%)" }
   };
    }

    private void PlayTrack(Track track)
    {
        Console.WriteLine($"Playing: {track.Title} by {track.Artist}");
        nowPlaying = track;
        StateHasChanged();
    }

    private void ShuffleQueue()
    {
        var random = new Random();
      queueTracks = queueTracks.OrderBy(x => random.Next()).ToList();
    for (int i = 0; i < queueTracks.Count; i++)
      {
 queueTracks[i].Position = i + 1;
        }
        Console.WriteLine("Queue shuffled");
        StateHasChanged();
    }

    private void ClearQueue()
    {
      queueTracks.Clear();
        Console.WriteLine("Queue cleared");
      StateHasChanged();
    }

    private void TogglePlay()
    {
        isPlaying = !isPlaying;
        Console.WriteLine(isPlaying ? "Playing" : "Paused");
  }

    private void SkipNext()
    {
        if (queueTracks.Any())
        {
      PlayTrack(queueTracks.First());
      }
    }

    private void ToggleLike()
    {
  Console.WriteLine("Toggled like");
    }

    private void AddToPlaylist()
    {
        Console.WriteLine("Add to playlist");
    }

    private class Track
    {
        public int Id { get; set; }
        public int Position { get; set; }
        public string Title { get; set; } = string.Empty;
     public string Artist { get; set; } = string.Empty;
        public string Album { get; set; } = string.Empty;
        public string Duration { get; set; } = string.Empty;
        public string ImageUrl { get; set; } = string.Empty;
        public string Gradient { get; set; } = string.Empty;
    }
}

<style>
    .queue-page {
        color: #fff;
        padding: 0;
        max-width: 100%;
    }

    .queue-header {
        padding: 24px 24px 24px;
        margin-bottom: 24px;
    }

  .queue-title {
        font-size: 32px;
   font-weight: 700;
        margin: 0 0 8px 0;
        color: #fff;
        letter-spacing: -0.02em;
    }

    .queue-stats {
     display: flex;
        align-items: center;
        gap: 8px;
        margin-bottom: 20px;
        font-size: 13px;
        color: #b3b3b3;
    }

    .queue-count {
      font-weight: 400;
    }

    .queue-separator {
  font-weight: 700;
    }

    .queue-duration {
        font-weight: 400;
    }

.queue-actions {
        display: flex;
        gap: 10px;
    }

    .action-btn {
        display: flex;
      align-items: center;
        gap: 8px;
  padding: 8px 18px;
        border-radius: 20px;
        border: 1px solid rgba(255, 255, 255, 0.15);
        background-color: rgba(0, 0, 0, 0.4);
  color: #fff;
   font-size: 13px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .action-btn:hover {
        background-color: rgba(255, 255, 255, 0.1);
        border-color: rgba(255, 255, 255, 0.3);
        transform: scale(1.02);
    }

    .action-btn svg {
     flex-shrink: 0;
    }

    .section-title {
        font-size: 18px;
font-weight: 700;
        margin: 0 0 16px 0;
        padding: 0 24px;
        color: #fff;
    }

    .now-playing-section {
margin-bottom: 32px;
        padding: 0 24px;
    }

    .now-playing-card {
        background: rgba(40, 40, 40, 0.6);
        border-radius: 8px;
      padding: 20px;
        border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .now-playing-content {
        display: flex;
   gap: 20px;
        align-items: flex-start;
    }

    .track-cover-large {
        width: 80px;
        height: 80px;
        border-radius: 6px;
        flex-shrink: 0;
 overflow: hidden;
    }

    .track-cover-large img {
     width: 100%;
height: 100%;
        object-fit: cover;
    }

    .now-playing-info {
      flex: 1;
        display: flex;
        flex-direction: column;
    gap: 8px;
    }

    .track-title-large {
   font-size: 16px;
        font-weight: 600;
   color: #fff;
        margin-bottom: 4px;
    }

    .track-metadata {
        display: flex;
      align-items: center;
    gap: 6px;
    font-size: 13px;
   color: #b3b3b3;
        margin-bottom: 12px;
    }

    .track-artist-large {
        color: #fff;
    }

    .metadata-separator {
        color: #666;
  }

    .track-album-large {
  color: #b3b3b3;
    }

    .playback-controls {
display: flex;
flex-direction: column;
        gap: 12px;
    }

    .progress-section {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .time-current,
    .time-total {
      font-size: 12px;
        color: #b3b3b3;
        font-variant-numeric: tabular-nums;
        min-width: 32px;
    }

    .time-total {
        text-align: right;
    }

    .progress-bar-container {
        flex: 1;
        height: 4px;
        background-color: #4d4d4d;
        border-radius: 2px;
        cursor: pointer;
        position: relative;
    }

    .progress-bar-container:hover {
      height: 6px;
    }

    .progress-bar {
        width: 100%;
        height: 100%;
        position: relative;
    }

    .progress-bar-fill {
        height: 100%;
        background-color: #1db954;
        border-radius: 2px;
        transition: width 0.1s linear;
    }

    .control-buttons {
        display: flex;
        align-items: center;
        gap: 12px;
  }

    .control-btn {
        background: transparent;
 border: none;
        color: #b3b3b3;
        cursor: pointer;
        padding: 4px;
display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .control-btn:hover {
        color: #fff;
        transform: scale(1.1);
    }

    .play-btn-large svg circle {
        transition: fill 0.2s ease;
    }

.play-btn-large:hover svg circle {
fill: #1ed760;
    }

    .icon-btn {
        color: #b3b3b3;
    }

    .icon-btn:hover {
      color: #fff;
    }

    .queue-list-section,
    .recently-played-section {
    margin-bottom: 32px;
    }

    .queue-table {
        padding: 0 24px;
    }

    .queue-table-header {
     display: grid;
        grid-template-columns: 40px 1fr 180px 60px;
        gap: 16px;
     padding: 8px 12px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 4px;
        color: #b3b3b3;
        font-size: 11px;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.1em;
    }

    .header-number {
        text-align: center;
    }

    .header-title {
  padding-left: 60px;
    }

    .header-album {
        padding-left: 0;
    }

    .header-duration {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .queue-table-body {
        display: flex;
   flex-direction: column;
        gap: 2px;
    }

    .queue-track-row {
        display: grid;
   grid-template-columns: 40px 1fr 180px 60px;
        gap: 16px;
    align-items: center;
        padding: 8px 12px;
        border-radius: 4px;
        transition: background-color 0.2s ease;
    }

    .queue-track-row:hover {
        background-color: rgba(255, 255, 255, 0.08);
    }

    .track-number {
        display: flex;
 align-items: center;
        justify-content: center;
     color: #b3b3b3;
      font-size: 14px;
  font-weight: 400;
        min-width: 40px;
    }

    .play-icon-btn {
   background: transparent;
        border: none;
        color: #fff;
 cursor: pointer;
 padding: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s ease;
    }

    .play-icon-btn:hover {
        transform: scale(1.1);
    }

    .track-main {
        display: flex;
        align-items: center;
        gap: 12px;
        min-width: 0;
    }

    .track-cover {
    width: 40px;
      height: 40px;
        border-radius: 4px;
     flex-shrink: 0;
     overflow: hidden;
  }

    .track-cover img {
        width: 100%;
        height: 100%;
  object-fit: cover;
    }

    .track-info {
        flex: 1;
        min-width: 0;
    }

    .track-title {
 font-size: 15px;
    font-weight: 400;
        color: #fff;
      white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        margin-bottom: 4px;
    }

    .track-artist {
     font-size: 13px;
 color: #b3b3b3;
     white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .track-album {
        font-size: 13px;
        color: #b3b3b3;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .track-duration {
text-align: center;
        font-size: 13px;
      color: #b3b3b3;
      font-weight: 400;
        font-variant-numeric: tabular-nums;
    }

    @@media (max-width: 1200px) {
        .queue-table-header,
        .queue-track-row {
    grid-template-columns: 40px 1fr 150px 60px;
    }
    }

    @@media (max-width: 992px) {
        .queue-title {
          font-size: 28px;
     }

   .queue-table-header,
        .queue-track-row {
            grid-template-columns: 40px 1fr 60px;
        }

        .track-album,
        .header-album {
   display: none;
        }

        .now-playing-content {
   flex-direction: column;
        }

    .track-cover-large {
         width: 100%;
            height: 200px;
        }
    }

    @@media (max-width: 768px) {
        .queue-title {
     font-size: 24px;
  }

        .section-title {
      font-size: 16px;
        }

     .action-btn {
      font-size: 12px;
  padding: 6px 14px;
        }
    }

    @@media (max-width: 480px) {
        .queue-actions {
   flex-direction: column;
        }

        .action-btn {
   width: 100%;
            justify-content: center;
        }
    }

    .action-btn:focus-visible,
    .play-icon-btn:focus-visible,
    .control-btn:focus-visible {
        outline: 2px solid #1db954;
        outline-offset: 2px;
    }
</style>
